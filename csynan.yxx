%{
/*
Copyright (c) 1997-2007, VÃ¡clav Haisman

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
#include <iostream>

#define YYPARSE_PARAM ptr 
#define YYERROR_VERBOSE 1
#define YYDEBUG 1

char* filename = "";
extern int yylex (void);
void yyerror (char *s);

#include "ast.hxx"
#include "defines.hxx"
#include "lexan.hxx"
%}

%token TOK_INT TOK_CHAR TOK_LONG TOK_UNSIGNED TOK_FLOAT TOK_DOUBLE TOK_SIGNED TOK_SHORT
%token TOK_CONST TOK_WHILE TOK_IF TOK_GOTO TOK_TYPEDEF TOK_ENUM
%token TOK_UNION TOK_STRUCT TOK_STATIC TOK_REGISTER TOK_AUTO TOK_SWITCH TOK_CASE
%token TOK_BREAK TOK_CONTINUE TOK_DEFAULT TOK_RETURN TOK_EXTERN TOK_VOID TOK_ELSE
%token TOK_IDENT TOK_FPNUM TOK_INTNUM TOK_UINTNUM TOK_STRING TOK_CHARVAL
%token TOK_EQ TOK_GE TOK_MINUSEQ TOK_MINMIN TOK_LAND TOK_LOR TOK_PLUSEQ TOK_MULTEQ
%token TOK_DIVEQ TOK_LSHIFT TOK_RSHIFT TOK_ARROW TOK_LISHIFTEQ TOK_XOREQ
%token TOK_LE TOK_PLUSPLUS TOK_OREQ TOK_ANDEQ TOK_ELLIPSIS TOK_FOR TOK_NE
%token TOK_LSHIFTEQ TOK_VOLATILE TOK_MODEQ TOK_RSHIFTEQ TOK_DO TOK_SIZEOF
%token TYPE_NAME

%start translation_unit
%%

primary_expression
        : TOK_IDENT
        {
            $$.ast = new CIdentExpr(new CIdent(*$1.str));
        }
        
        | constant
        {
            $$.ast = $1.ast;
        }
        
        | TOK_STRING
        {
            throw std::string("String literal not supported.");
        }
        
        | '(' expression ')'
        {
            $$.ast = $2.ast;
        }
        ;

constant
        : TOK_FPNUM
        {
            $$.ast = new CFloatExpr($1.fpval);
        }
        
        | TOK_INTNUM
        {
            $$.ast = new CIntExpr($1.intval);
        }
        
        | TOK_UINTNUM
        {
            $$.ast = new CUIntExpr($1.uintval);
        }
        
        | TOK_CHARVAL
        {
            throw std::string("Character constant not supported.");
        }
        ;
        
postfix_expression
        : primary_expression
        {
            $$.ast = $1.ast;
        }
        
        | postfix_expression '[' expression ']'
        {
            throw std::string("Arrays not supported.");
        }
        
        | postfix_expression '(' ')'
        {
            throw std::string("Functions not supported.");
        }
        
        | postfix_expression '(' argument_expression_list ')'
        {
            throw std::string("Functions not supported.");
        }
        
        | postfix_expression '.' TOK_IDENT
        {
            throw std::string("Structured types not supported.");
        }
        
        | postfix_expression TOK_ARROW TOK_IDENT
        {
            throw std::string("Structured types not supported.");
        }
        
        | postfix_expression TOK_PLUSPLUS
        {
            $$.ast = new CUnOp(CUnOp::PostInc, (CExpr *)$1.ast);
        }
        
        | postfix_expression TOK_MINMIN
        {
            $$.ast = new CUnOp(CUnOp::PostDec, (CExpr *)$1.ast);
        }
        ;

argument_expression_list
        : assignment_expression
        {
            $$.ast = $1.ast;
        }
        
        | argument_expression_list ',' assignment_expression
        {
            throw std::string("Argument lists not supported.");
        }
        ;

unary_expression
        : postfix_expression 
        {
            $$.ast = $1.ast;
        }
        
        | TOK_PLUSPLUS unary_expression
        {
            $$.ast = new CUnOp(CUnOp::PreInc, (CExpr *)$2.ast);
        }
        
        | TOK_MINMIN unary_expression
        {
            $$.ast = new CUnOp(CUnOp::PreDec, (CExpr *)$2.ast);
        }
        
        | unary_operator cast_expression
        {
            $$.ast = new CUnOp($1.unopt, (CExpr *)$2.ast);
        }
        
        | TOK_SIZEOF unary_expression
        {
            throw std::string("sizeof not supported.");
        }
        
        | TOK_SIZEOF '(' type_name ')'
        {
            throw std::string("sizeof not supported.");
        }
        ;

unary_operator
        : '&'
        {
            $$.unopt = CUnOp::And;
        }
        
        | '*'
        {
            $$.unopt = CUnOp::Star;
        }
        
        | '+'
        {
            $$.unopt = CUnOp::Plus;
        }
        
        | '-'
        {
            $$.unopt = CUnOp::Minus;
        }
        
        | '~'
        {
            $$.unopt = CUnOp::Tilde;
        }
        
        | '!'
        {
            $$.unopt = CUnOp::Excl;
        }
        ;

cast_expression
        : unary_expression
        {
            $$.ast = $1.ast;
        }
        
        | '(' type_name ')' cast_expression
        /* !!! Doplnit !!! */
        ;

multiplicative_expression
        : cast_expression 
        {
            $$.ast = $1.ast;
        }
        
        | multiplicative_expression '*' cast_expression
        {
            $$.ast = new CBinOp(CBinOp::Mult, (CExpr *)$1.ast, (CExpr *)$3.ast);
        }
        
        | multiplicative_expression '/' cast_expression
        {
            $$.ast = new CBinOp(CBinOp::Div, (CExpr *)$1.ast, (CExpr *)$3.ast);
        }
        
        | multiplicative_expression '%' cast_expression
        {
            $$.ast = new CBinOp(CBinOp::Mod, (CExpr *)$1.ast, (CExpr *)$3.ast);
        }
        ;

additive_expression
        : multiplicative_expression
        {
            $$.ast = $1.ast;
        }
        
        | additive_expression '+' multiplicative_expression
        {
            $$.ast = new CBinOp(CBinOp::Plus, (CExpr *)$1.ast, (CExpr *)$3.ast);
        }
        
        | additive_expression '-' multiplicative_expression
        {
            $$.ast = new CBinOp(CBinOp::Minus, (CExpr *)$1.ast, (CExpr *)$3.ast);
        }
        ;

shift_expression
        : additive_expression
        {
            $$.ast = $1.ast;
        }
        
        | shift_expression TOK_LSHIFT additive_expression
        {
            $$.ast = new CBinOp(CBinOp::LShift, (CExpr *)$1.ast, (CExpr *)$3.ast);
        }
        
        | shift_expression TOK_RSHIFT additive_expression
        {
            $$.ast = new CBinOp(CBinOp::RShift, (CExpr *)$1.ast, (CExpr *)$3.ast);
        }
        ;

relational_expression
        : shift_expression
        {
            $$.ast = $1.ast;
        }
        
        | relational_expression '<' shift_expression
        {
            $$.ast = new CBinOp(CBinOp::Lt, (CExpr *)$1.ast, (CExpr *)$3.ast);
        }
        
        | relational_expression '>' shift_expression
        {
            $$.ast = new CBinOp(CBinOp::Gt, (CExpr *)$1.ast, (CExpr *)$3.ast);
        }
        
        | relational_expression TOK_LE shift_expression
        {
            $$.ast = new CBinOp(CBinOp::LEq, (CExpr *)$1.ast, (CExpr *)$3.ast);
        }
        
        | relational_expression TOK_GE shift_expression
        {
            $$.ast = new CBinOp(CBinOp::GEq, (CExpr *)$1.ast, (CExpr *)$3.ast);
        }
        ;

equality_expression
        : relational_expression
        {
            $$.ast = $1.ast;
        }
        
        | equality_expression TOK_EQ relational_expression
        {
            $$.ast = new CBinOp(CBinOp::Eq, (CExpr *)$1.ast, (CExpr *)$3.ast);
        }
        
        | equality_expression TOK_NE relational_expression
        {
            $$.ast = new CBinOp(CBinOp::NEq, (CExpr *)$1.ast, (CExpr *)$3.ast);
        }
        ;

and_expression
        : equality_expression
        {
            $$.ast = $1.ast;
        }
        
        | and_expression '&' equality_expression
        {
            $$.ast = new CBinOp(CBinOp::BAnd, (CExpr *)$1.ast, (CExpr *)$3.ast);
        }
        ;

exclusive_or_expression
        : and_expression
        {
            $$.ast = $1.ast;
        }
        
        | exclusive_or_expression '^' and_expression
        {
            $$.ast = new CBinOp(CBinOp::Xor, (CExpr *)$1.ast, (CExpr *)$3.ast);
        }
        ;

inclusive_or_expression
        : exclusive_or_expression
        {
            $$.ast = $1.ast;
        }
        
        | inclusive_or_expression '|' exclusive_or_expression
        {
            $$.ast = new CBinOp(CBinOp::BOr, (CExpr *)$1.ast, (CExpr *)$3.ast);
        }
        ;

logical_and_expression
        : inclusive_or_expression
        {
            $$.ast = $1.ast;
        }
        
        | logical_and_expression TOK_LAND inclusive_or_expression
        {
            $$.ast = new CBinOp(CBinOp::LAnd, (CExpr *)$1.ast, (CExpr *)$3.ast);
        }
        ;

logical_or_expression
        : logical_and_expression
        {
            $$.ast = $1.ast;
        }
        
        | logical_or_expression TOK_LOR logical_and_expression
        {
            $$.ast = new CBinOp(CBinOp::LOr, (CExpr *)$1.ast, (CExpr *)$3.ast);
        }
        ;

conditional_expression
        : logical_or_expression
        {
            $$.ast = $1.ast;
        }
        
        | logical_or_expression '?' expression ':' conditional_expression
        {
            throw std::string("Ternary operator not supported.");
        }
        ;

assignment_expression
        : conditional_expression
        {
            $$.ast = $1.ast;
        }
        
        | unary_expression assignment_operator assignment_expression
        {
            /*if ($2.binopt != CBinOp::Assign)
	      throw ("Only simple assignment operator supported.");
	      else
	      $$.ast = new CBinOp(CBinOp::Assign, (CExpr *)$1.ast, (CExpr *)$3.ast);*/
	    $$.ast = new CBinOp($2.binopt, (CExpr *)$1.ast, (CExpr *)$3.ast);
        }
        ;

assignment_operator
        : '='
        {
            $$.binopt = CBinOp::Assign;
        }
        
        | TOK_MULTEQ
        {
            $$.binopt = CBinOp::MultAss;
        }
        
        | TOK_DIVEQ
        {
            $$.binopt = CBinOp::DivAss;
        }
        
        | TOK_MODEQ
        {
            $$.binopt = CBinOp::ModAss;
        }
        
        | TOK_PLUSEQ
        {
            $$.binopt = CBinOp::PlusAss;
        }
        
        | TOK_MINUSEQ
        {
            $$.binopt = CBinOp::MinusAss;
        }
        
        | TOK_LSHIFTEQ
        {
            $$.binopt = CBinOp::LShiftAss;
        }
        
        | TOK_RSHIFTEQ
        {
            $$.binopt = CBinOp::RShiftAss;
        }
        
        | TOK_ANDEQ
        {
            $$.binopt = CBinOp::BAndAss;
        }
        
        | TOK_XOREQ
        {
            $$.binopt = CBinOp::XorAss;
        }
        
        | TOK_OREQ
        {
            $$.binopt = CBinOp::BOrAss;
        }
        ;

expression
        : assignment_expression
        {
            $$.ast = $1.ast;
        }
        
        | expression ',' assignment_expression
        {
            throw std::string("Operator comma not supported.");
        }
        ;

constant_expression
        : conditional_expression
        {
            $$.ast = $1.ast;
        }
        ;

declaration
        : declaration_specifiers ';'
        {
            $$.ast = new CDecl((CDeclSpec *)$1.ast, NULL, NULL);
        }
        
        | declaration_specifiers init_declarator_list ';'
        {
            $$.ast = new CDecl((CDeclSpec *)$1.ast, (CInitDecl *)$2.ast, NULL);
        }
        ;

declaration_specifiers
        : storage_class_specifier
        {
            throw std::string("storage_class_specifier not supported");
        }
        
        | storage_class_specifier declaration_specifiers
        {
            $$.ast = $2.ast;
        }
        
        | type_specifier
        {
            $$.ast = new CTypeSpec($1.tstp, NULL); 
        }
        
        | type_specifier declaration_specifiers
        {
            $$.ast = new CTypeSpec($1.tstp, (CDeclSpec *)$2.ast);
        }
        
        | type_qualifier
        {
            throw std::string("type_qualifier not supported.");
        }
        
        | type_qualifier declaration_specifiers
        {
            $$.ast = $2.ast;
        }
        ;

init_declarator_list
        : init_declarator
        {
            $$.ast = $1.ast;
        }
        
        /* | init_declarator_list ',' init_declarator */
        | init_declarator ',' init_declarator_list
        {
            ((CInitDecl *)($1.ast))->set_next((CInitDecl *)$3.ast);
            $$.ast = $1.ast;
        }
        ;

init_declarator
        : declarator
        {
            $$.ast = new CInitDecl((CDeclarator *)$1.ast, NULL, NULL);
        }
        
        | declarator '=' initializer
        {
            $$.ast = new CInitDecl((CDeclarator *)$1.ast, (CExpr *)$3.ast, NULL);
        }
        ;

storage_class_specifier
        : TOK_TYPEDEF
        | TOK_EXTERN
        | TOK_STATIC
        | TOK_AUTO
        | TOK_REGISTER
        ;

type_specifier
        : TOK_VOID
        {
            $$.tstp = CTypeSpec::Void;
        }
        
        | TOK_CHAR
        {
            $$.tstp = CTypeSpec::Char;
        }
        
        | TOK_SHORT
        {
            $$.tstp = CTypeSpec::Short;
        }
        
        | TOK_INT
        {
            $$.tstp = CTypeSpec::Int;
        }
        
        | TOK_LONG
        {
            $$.tstp = CTypeSpec::Long;
        }
        
        | TOK_FLOAT
        {
            $$.tstp = CTypeSpec::Float;
        }
        
        | TOK_DOUBLE
        {
            $$.tstp = CTypeSpec::Double;
        }
        
        | TOK_SIGNED
        {
            $$.tstp = CTypeSpec::Signed;
        }
        
        | TOK_UNSIGNED
        {
            $$.tstp = CTypeSpec::Unsigned;
        }
        
        | struct_or_union_specifier
        {
            throw std::string("struct_or_union_specifier not supported.");
        }
        
        | enum_specifier
        {
            throw std::string("enum_specifier not supported.");
        }
        
        | TYPE_NAME
        {
            throw std::string("TYPE_NAME not supported.");
        }
        ;

struct_or_union_specifier
        : struct_or_union TOK_IDENT '{' struct_declaration_list '}'
        {
            throw std::string("struct_or_union_specifier not supported.");
        }
        
        | struct_or_union '{' struct_declaration_list '}'
        {
            throw std::string("struct_or_union_specifier not supported.");
        }
        
        | struct_or_union TOK_IDENT
        {
            throw std::string("struct_or_union_specifier not supported.");
        }
        ;

struct_or_union
        : TOK_STRUCT
        | TOK_UNION
        ;

struct_declaration_list
        : struct_declaration
        | struct_declaration_list struct_declaration
        ;

struct_declaration
        : specifier_qualifier_list struct_declarator_list ';'
        ;

specifier_qualifier_list
        : type_specifier specifier_qualifier_list
        | type_specifier
        | type_qualifier specifier_qualifier_list
        | type_qualifier
        ;

struct_declarator_list
        : struct_declarator
        | struct_declarator_list ',' struct_declarator
        ;

struct_declarator
        : declarator
        | ':' constant_expression
        | declarator ':' constant_expression
        ;

enum_specifier
        : TOK_ENUM '{' enumerator_list '}'
        | TOK_ENUM TOK_IDENT '{' enumerator_list '}'
        | TOK_ENUM TOK_IDENT
        ;

enumerator_list
        : enumerator
        | enumerator_list ',' enumerator
        ;

enumerator
        : TOK_IDENT
        | TOK_IDENT '=' constant_expression
        ;

type_qualifier
        : TOK_CONST
        | TOK_VOLATILE
        ;

declarator
        : pointer direct_declarator
        {
            throw std::string("Pointers not supported.");
        }
        
        | direct_declarator
        {
            $$.ast = new CDeclarator(CDeclarator::DirectDecl, (CIdent *)$1.ast);
        }
        ;

direct_declarator
        : TOK_IDENT
        {
            $$.ast = new CIdent(*$1.str);
        }
        
        | '(' declarator ')'
        {
            $$.ast = $2.ast;
        }
        
        | direct_declarator '[' constant_expression ']'
        {
            throw std::string("Arrays not supported.");
        }
        
        | direct_declarator '[' ']'
        {
            throw std::string("Arrays not supported.");
        }
        
        | direct_declarator '(' parameter_type_list ')'
        {
            throw std::string("direct_declarator '(' parameter_type_list ')' "
                              "not supported.");
        }
        
        | direct_declarator '(' identifier_list ')'
        {
            throw std::string("direct_declarator '(' identifier_list ')' "
                              "not supported.");
        }
        
        | direct_declarator '(' ')'
        {
            /* !!! doplnit !!! */
        }
        ;

pointer
        : '*'
        | '*' type_qualifier_list
        | '*' pointer
        | '*' type_qualifier_list pointer
        ;

type_qualifier_list
        : type_qualifier
        | type_qualifier_list type_qualifier
        ;

parameter_type_list
        : parameter_list
        | parameter_list ',' TOK_ELLIPSIS
        ;

parameter_list
        : parameter_declaration
        | parameter_list ',' parameter_declaration
        ;

parameter_declaration
        : declaration_specifiers declarator
        | declaration_specifiers abstract_declarator
        | declaration_specifiers
        ;

identifier_list
        : TOK_IDENT
        | identifier_list ',' TOK_IDENT
        ;

type_name
        : specifier_qualifier_list
        | specifier_qualifier_list abstract_declarator
        ;

abstract_declarator
        : pointer
        {
            throw std::string("abstract_declarator not supported.");
        }
        
        | direct_abstract_declarator
        {
            throw std::string("abstract_declarator not supported.");
        }
        
        | pointer direct_abstract_declarator
        {
            throw std::string("abstract_declarator not supported.");
        }
        ;

direct_abstract_declarator
        : '(' abstract_declarator ')'
        | '[' ']'
        | '[' constant_expression ']'
        | direct_abstract_declarator '[' ']'
        | direct_abstract_declarator '[' constant_expression ']'
        | '(' ')'
        | '(' parameter_type_list ')'
        | direct_abstract_declarator '(' ')'
        | direct_abstract_declarator '(' parameter_type_list ')'
        ;

initializer
        : assignment_expression
        {
            $$.ast = $1.ast;
        }
        
        | '{' initializer_list '}'
        {
            throw std::string("Initializers of structured types not supported.");
        }
        
        | '{' initializer_list ',' '}'
        {
            throw std::string("Initializers of structured types not supported.");
        }
        ;

initializer_list
        : initializer
        | initializer_list ',' initializer
        ;

statement
        : labeled_statement
        {
            $$.ast = $1.ast;
        }
        
        | compound_statement
        {
            $$.ast = $1.ast;
        }
        
        | expression_statement
        {
            $$.ast = $1.ast;
        }
        
        | selection_statement
        {
            $$.ast = $1.ast;
        }
        
        | iteration_statement
        {
            $$.ast = $1.ast;
        }
        
        | jump_statement
        {
            $$.ast = $1.ast;
        }
        ;

labeled_statement
        : TOK_IDENT ':' statement
        {
            throw std::string("Labels not supported.");
        }
        
        | TOK_CASE constant_expression ':' statement
        {
            $$.ast = new CLabeledStatement(CLabeledStatement::Case, 
                (CConstExpr *)$2.ast, (CStatement *)$4.ast, NULL);
        }
        
        | TOK_DEFAULT ':' statement
        {
            $$.ast = new CLabeledStatement(CLabeledStatement::Default, NULL, 
                (CStatement *)$3.ast, NULL);
        }
        ;

compound_statement
        : '{' '}'
        {
            //$$.ast = NULL; // ???
            $$.ast = new CCompoundStatement(NULL, NULL, NULL);
        }
        
        | '{' statement_list '}'
        {
            $$.ast = new CCompoundStatement(NULL, (CStatement *)$2.ast, NULL);
        }
        
        | '{' declaration_list '}'
        {
            $$.ast = new CCompoundStatement((CDecl *)$2.ast, NULL, NULL);
        }
        
        | '{' declaration_list statement_list '}'
        {
            $$.ast = new CCompoundStatement((CDecl *)$2.ast, (CStatement *)$3.ast, 
                NULL);
        }
        ;

declaration_list
        : declaration
        {
            $$.ast = $1.ast;
        }
        
        /* | declaration_list declaration */
        | declaration declaration_list
        {
          (dynamic_cast<CDecl *>($1.ast))->set_next
            (dynamic_cast<CDecl *>($2.ast));
            $$.ast = $1.ast;
        }
        ;

statement_list
        : statement
        {
            $$.ast = $1.ast;
        }
        
        /* | statement_list statement */
        | statement statement_list
        {
          (dynamic_cast<CStatement *>($1.ast))->set_next
            (dynamic_cast<CStatement *>($2.ast));
            $$.ast = $1.ast;
        }
        ;

expression_statement
        : ';'
        {
            $$.ast = new CExprStatement(NULL, NULL);
        }
        
        | expression ';'
        {
            $$.ast = new CExprStatement((CExpr *)$1.ast, NULL);
        }
        ;

selection_statement
        : TOK_IF '(' expression ')' statement
        {
            throw std::string("'If' statement not supported.");
        }
        
        | TOK_IF '(' expression ')' statement TOK_ELSE statement
        {
            throw std::string("'If' statement not supported.");
        }
        
        | TOK_SWITCH '(' expression ')' statement
        {
            $$.ast = new CSelectionStatement(CSelectionStatement::Switch, 
                (CExpr *)$3.ast, (CStatement *)$5.ast, NULL, NULL);
        }
        ;

iteration_statement
        : TOK_WHILE '(' expression ')' statement
        {
            $$.ast = new CIterationStatement(CIterationStatement::While, 
                (CExpr *)$3.ast, (CStatement *)$5.ast, NULL);
        }
        
        | TOK_DO statement TOK_WHILE '(' expression ')' ';'
        {
            throw std::string("'Do' statement not supported.");
        }
        
        | TOK_FOR '(' expression_statement expression_statement ')' statement
        {
            throw std::string("'For' statement not supported.");
        }
        
        | TOK_FOR '(' expression_statement expression_statement expression ')' statement
        {
            throw std::string("'For' statement not supported.");
        }
        ;

jump_statement
        : TOK_GOTO TOK_IDENT ';'
        {
            throw std::string("'Goto' statement not supported.");
        }
        
        | TOK_CONTINUE ';'
        {
            $$.ast = new CJumpStatement(CJumpStatement::Continue, NULL, NULL);
        }
        
        | TOK_BREAK ';'
        {
            $$.ast = new CJumpStatement(CJumpStatement::Break, NULL, NULL);
        }
        
        | TOK_RETURN ';'
        {
            $$.ast = new CJumpStatement(CJumpStatement::Return, NULL, NULL);
        }
        
        | TOK_RETURN expression ';'
        {
            $$.ast = new CJumpStatement(CJumpStatement::Return, (CExpr *)$2.ast, 
                NULL);
        }
        ;

translation_unit
        : external_declaration
        | translation_unit external_declaration
        ;

external_declaration
        : function_definition
        {
            *((CCompoundStatement **)YYPARSE_PARAM) = (CCompoundStatement *)$1.ast;
        }
        
        | declaration
        {
            throw std::string("External declaration not supported.");
        }
        ;

function_definition
        : declaration_specifiers declarator declaration_list compound_statement
        {
            $$.ast = $4.ast;
        }
        
        | declaration_specifiers declarator compound_statement
        {
            $$.ast = $3.ast;
        }
        
        | declarator declaration_list compound_statement
        {
            $$.ast = $3.ast;
        }
        
        | declarator compound_statement
        {
            $$.ast = $2.ast;
        }
        ;

%%

void yyerror (char *s)
{		
    std::cerr << filename << ": " << s << std::endl;
}
 
 
